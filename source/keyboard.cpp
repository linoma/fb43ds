#include "keyboard.h"
#include "keyboard_bin.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define F_1	0x0
#define F_2	0x0
#define F_3	0x0
#define F_4	0x0
#define F_5	0x0
#define F_6	0x0
#define F_7	0x0
#define F_8	0x0
#define F_9	0x0
#define F10	0x0
#define F11	0x0
#define F12	0x0

#define TAB	0x0

#define ESC	0x0 // Escape
#define BSP	0x8 // Backspace
#define CAP	0x2 // Caps
#define RET	'\n' // Enter
#define SHF	0x4 // Shift
#define	CTR	0x0 // Ctrl
#define SPC	0x20 // Space
#define ALT	0x0 // Alt
#define NDS	0x0 // DS
#define SCN	0x0 // Screen

#define CUP	0x0 // Cursor up
#define CDW	0x0 // Cursor down

const unsigned char keyboard_Hit[512] = {
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,ESC,ESC,0x0,F_1,F_1,F_2,F_2,F_3,F_3,F_4,F_4,F_5,F_5,F_6,F_6,F_7,F_7,F_8,F_8,F_9,F_9,F10,F10,F11,F11,F12,F12,0x0,0x0,0x0,
0x0,0x0,ESC,ESC,0x0,F_1,F_1,F_2,F_2,F_3,F_3,F_4,F_4,F_5,F_5,F_6,F_6,F_7,F_7,F_8,F_8,F_9,F_9,F10,F10,F11,F11,F12,F12,0x0,0x0,0x0,
0x0,0x0,'1','1','2','2','3','3','4','4','5','5','6','6','7','7','8','8','9','9','0','0','-','-','=','=',0x0,BSP,BSP,BSP,0x0,0x0,
0x0,0x0,'1','1','2','2','3','3','4','4','5','5','6','6','7','7','8','8','9','9','0','0','-','-','=','=',0x0,BSP,BSP,BSP,0x0,0x0,
0x0,0x0,TAB,'q','q','w','w','e','e','r','r','t','t','y','y','u','u','i','i','o','o','p','p','[','[',']',']','\\','\\',0x0,0x0,0x0,
0x0,0x0,TAB,'q','q','w','w','e','e','r','r','t','t','y','y','u','u','i','i','o','o','p','p','[','[',']',']','\\','\\',0x0,0x0,0x0,
0x0,0x0,CAP,CAP,'a','a','s','s','d','d','f','f','g','g','h','h','j','j','k','k','l','l',';',';','\'','\'',RET,RET,RET,RET,0x0,0x0,
0x0,0x0,CAP,CAP,'a','a','s','s','d','d','f','f','g','g','h','h','j','j','k','k','l','l',';',';','\'','\'',RET,RET,RET,RET,0x0,0x0,
0x0,0x0,SHF,SHF,SHF,'z','z','x','x','c','c','v','v','b','b','n','n','m','m',',',',','.','.','/','/',SHF,SHF,SHF,CUP,CUP,0x0,0x0,
0x0,0x0,SHF,SHF,SHF,'z','z','x','x','c','c','v','v','b','b','n','n','m','m',',',',','.','.','/','/',SHF,SHF,SHF,CUP,CUP,0x0,0x0,
0x0,0x0,CTR,CTR,NDS,NDS,ALT,ALT,'`','`',SPC,SPC,SPC,SPC,SPC,SPC,SPC,SPC,SPC,SPC,ALT,ALT,NDS,NDS,SCN,SCN,CTR,CTR,CDW,CDW,0x0,0x0,
0x0,0x0,CTR,CTR,NDS,NDS,ALT,ALT,'`','`',SPC,SPC,SPC,SPC,SPC,SPC,SPC,SPC,SPC,SPC,ALT,ALT,NDS,NDS,SCN,SCN,CTR,CTR,CDW,CDW,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
};

const unsigned char keyboard_Hit_Shift[512] = {
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,ESC,ESC,0x0,F_1,F_1,F_2,F_2,F_3,F_3,F_4,F_4,F_5,F_5,F_6,F_6,F_7,F_7,F_8,F_8,F_9,F_9,F10,F10,F11,F11,F12,F12,0x0,0x0,0x0,
0x0,0x0,ESC,ESC,0x0,F_1,F_1,F_2,F_2,F_3,F_3,F_4,F_4,F_5,F_5,F_6,F_6,F_7,F_7,F_8,F_8,F_9,F_9,F10,F10,F11,F11,F12,F12,0x0,0x0,0x0,
0x0,0x0,'!','!','@','@','#','#','$','$','%','%','^','^','&','&','*','*','(','(',')',')','_','_','+','+',0x0,BSP,BSP,BSP,0x0,0x0,
0x0,0x0,'!','!','@','@','#','#','$','$','%','%','^','^','&','&','*','*','(','(',')',')','_','_','+','+',0x0,BSP,BSP,BSP,0x0,0x0,
0x0,0x0,TAB,'Q','Q','W','W','E','E','R','R','T','T','Y','Y','U','U','I','I','O','O','P','P','{','{','}','}','|','|',0x0,0x0,0x0,
0x0,0x0,TAB,'Q','Q','W','W','E','E','R','R','T','T','Y','Y','U','U','I','I','O','O','P','P','{','{','}','}','|','|',0x0,0x0,0x0,
0x0,0x0,CAP,CAP,'A','A','S','S','D','D','F','F','G','G','H','H','J','J','K','K','L','L',':',':','"','"',RET,RET,RET,RET,0x0,0x0,
0x0,0x0,CAP,CAP,'A','A','S','S','D','D','F','F','G','G','H','H','J','J','K','K','L','L',':',':','"','"',RET,RET,RET,RET,0x0,0x0,
0x0,0x0,SHF,SHF,SHF,'Z','Z','X','X','C','C','V','V','B','B','N','N','M','M','<','<','>','>','?','?',SHF,SHF,SHF,CUP,CUP,0x0,0x0,
0x0,0x0,SHF,SHF,SHF,'Z','Z','X','X','C','C','V','V','B','B','N','N','M','M','<','<','>','>','?','?',SHF,SHF,SHF,CUP,CUP,0x0,0x0,
0x0,0x0,CTR,CTR,NDS,NDS,ALT,ALT,'~','~',SPC,SPC,SPC,SPC,SPC,SPC,SPC,SPC,SPC,SPC,ALT,ALT,NDS,NDS,SCN,SCN,CTR,CTR,CDW,CDW,0x0,0x0,
0x0,0x0,CTR,CTR,NDS,NDS,ALT,ALT,'~','~',SPC,SPC,SPC,SPC,SPC,SPC,SPC,SPC,SPC,SPC,ALT,ALT,NDS,NDS,SCN,SCN,CTR,CTR,CDW,CDW,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
};

//---------------------------------------------------------------------------
CKeyboard::CKeyboard() : CImageGif()
{
	status = 0;
}
//---------------------------------------------------------------------------
int CKeyboard::init(CDesktop *d)
{
	RECT rc;
	
	if(load((u8 *)keyboard_bin))
		return -1;
	desk = d;
	desk->get_WindowRect(&rc);
	pt.x = ((rc.right - rc.left) - width) / 2;
	pt.y = (rc.bottom - (height/2));
	return 0;
}
//---------------------------------------------------------------------------
int CKeyboard::show(CBaseWindow *w)
{
	status |= 1;
	win = w;
	desk->Invalidate();
	return 0;
}
//---------------------------------------------------------------------------
int CKeyboard::hide()
{
	status &= ~1;
	desk->Invalidate();
	return 0;
}
//---------------------------------------------------------------------------
int CKeyboard::draw(u8 *dst)
{
	if(!(status & 1))
		return 0;
	return CImageGif::draw(dst,pt.x,pt.y,256,128,0,(status & 2) ? 128 : 0);
}
//---------------------------------------------------------------------------
int CKeyboard::onTouchEvent(touchPosition *p)
{
	int x,y;	
	u8 c;
	
	if(!(status & 1))
		return -1;
	x=p->px;
	y=p->py;
	if(x < pt.x || y < pt.y || y > (pt.y+128) || x > (pt.x+256))
		return -2;
	x = (x-pt.x)>>3;
	y = (y-pt.y)>>3;
	if(x < 2 || x > 29 || y > 12)
		return -3;
	if(!(status & 2))
		c = keyboard_Hit[x+(y*32)];
	else
		c = keyboard_Hit_Shift[x+(y*32)];
	if(c == CAP)
		status |= 2;		
	else if(c == SHF)
		status ^= 2;
	else if(win != NULL)
		win->onCharEvent(c);
	return 0;
}